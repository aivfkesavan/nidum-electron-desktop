name: "Nidum.ai macOS Build and Release"
on:
  push:
    branches:
      - main
jobs:
  create-release:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Install dependencies
        run: npm ci

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Build Electron App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build

      - name: Sign App and Create PKG
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Decode and import the Apple certificate
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Locate the app bundle
          APP_PATH=$(find "$PWD/dist" -name "*.app" -type d | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: App not found."
            exit 1
          fi

          # Sign the app and its components
          find "$APP_PATH" -type f -perm +111 -exec codesign --force --options runtime --entitlements "path/to/your.entitlements" --sign "Developer ID Application: Your Name (TEAM_ID)" {} \;

          # Sign the app bundle itself
          codesign --force --options runtime --entitlements "path/to/your.entitlements" --sign "Developer ID Application: Your Name (TEAM_ID)" "$APP_PATH"

          # Create the .pkg file
          PKG_OUTPUT="$PWD/dist/NidumAI.pkg"
          pkgbuild --root "$APP_PATH" \
                   --identifier "com.nidum.desktoplocalai" \
                   --version "${VERSION}" \
                   --install-location "/Applications" \
                   "$PKG_OUTPUT"

          # Sign the .pkg file
          SIGNED_PKG="$PWD/dist/NidumAI-Signed.pkg"
          productsign --sign "3rd Party Mac Developer Installer: Your Name (TEAM_ID)" "$PKG_OUTPUT" "$SIGNED_PKG"

          # Verify the signed .pkg
          spctl -a -vv -t install "$SIGNED_PKG"

          echo "PKG_PATH=$SIGNED_PKG" >> $GITHUB_ENV

      - name: Check if Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "v${{ env.VERSION }}" > /dev/null 2>&1; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
          PKG_PATH: ${{ env.PKG_PATH }}
        run: |
          if [ "${RELEASE_EXISTS}" = "true" ]; then
            echo "Updating existing release for version v${VERSION}"
            gh release upload "v${VERSION}" "${PKG_PATH}" --clobber
          else
            echo "Creating new release for version v${VERSION}"
            gh release create "v${VERSION}" "${PKG_PATH}" --title "Release v${VERSION}" --generate-notes
          fi

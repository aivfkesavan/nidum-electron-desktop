name: Build, Sign, and Release Electron App
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: write

jobs:
  build-sign-and-release:
    runs-on: macos-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Install dependencies
        run: npm install

      - name: Create entitlements file
        run: |
          cat > build/entitlements.mac.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
              <key>com.apple.security.network.client</key>
              <true/>
              <key>com.apple.security.network.server</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
          </dict>
          </plist>
          EOL

      - name: Update package.json
        run: |
          npm pkg set build.mac.hardenedRuntime=true
          npm pkg set build.mac.gatekeeperAssess=false
          npm pkg set build.mac.entitlements="build/entitlements.mac.plist"
          npm pkg set build.mac.entitlementsInherit="build/entitlements.mac.plist"

      - name: Build the application
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Starting build process..."
          npm run build
          echo "Build completed."

      - name: Sign DMG with entitlements
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Signing DMG with entitlements..."
          codesign --force --options runtime \
            --sign "Developer ID Application: Your Name (${APPLE_TEAM_ID})" \
            --entitlements build/entitlements.mac.plist \
            "./dist/RAGDrive-${{ env.VERSION }}-arm64.dmg"
          echo "DMG signed successfully."

      - name: Verify entitlements
        run: |
          echo "Verifying entitlements..."
          codesign -d --entitlements :- "./dist/RAGDrive-${{ env.VERSION }}-arm64.dmg"

      - name: Notarize
        id: notarize
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "Starting notarization process for ${{ env.DMG_PATH }}..."
          NOTARIZATION_OUTPUT=$(xcrun notarytool submit "${{ env.DMG_PATH }}" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait)
          echo "$NOTARIZATION_OUTPUT"
          SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep "id:" | head -n1 | awk '{print $2}')
          echo "SUBMISSION_ID=$SUBMISSION_ID" >> $GITHUB_OUTPUT
          if echo "$NOTARIZATION_OUTPUT" | grep -q "status: Invalid"; then
            echo "Error: Notarization failed. Retrieving detailed log..."
            xcrun notarytool log "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --team-id "$APPLE_TEAM_ID"
            exit 1
          fi
          echo "Notarization completed successfully."

      - name: Staple notarization ticket
        if: success()
        run: |
          echo "Stapling notarization ticket to ${{ env.DMG_PATH }}..."
          xcrun stapler staple "${{ env.DMG_PATH }}"
          if [ $? -ne 0 ]; then
            echo "Error: Stapling failed. This might indicate an issue with the notarization process."
            exit 1
          fi
          echo "Stapling completed successfully."

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          files: ${{ env.DMG_PATH }}
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

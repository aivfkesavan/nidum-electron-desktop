jobs:
  build-sign-notarize-release:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.11.1'

    - name: Install dependencies
      run: |
        npm install

    - name: Setup Python for node-gyp
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Create build directory and entitlements file
      run: |
        mkdir -p build
        cat > build/entitlements.mac.plist << EOL
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.allow-dyld-environment-variables</key>
            <true/>
            <key>com.apple.security.network.client</key>
            <true/>
            <key>com.apple.security.network.server</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
        </dict>
        </plist>
        EOL

    - name: Ensure appId is correctly set in package.json
      run: |
        npm pkg set build.appId="com.nidum.ragdrive"
        npm pkg set build.mac.hardenedRuntime=true
        npm pkg set build.mac.gatekeeperAssess=false
        npm pkg set build.mac.entitlements="build/entitlements.mac.plist"
        npm pkg set build.mac.entitlementsInherit="build/entitlements.mac.plist"

    - name: Import Apple Developer Certificate
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      run: |
        echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

    - name: Build Electron App
      run: npm run build

    - name: Get app version
      id: get_version
      run: |
        APP_VERSION=$(node -p "require('./package.json').version")
        echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

    - name: Verify built artifacts
      run: |
        DMG_PATH=$(find dist -name "*.dmg" | head -n 1)
        if [ -z "$DMG_PATH" ]; then
          echo "Error: DMG file not found!"
          exit 1
        fi
        echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV

    - name: Notarize app
      run: |
        xcrun notarytool submit "$DMG_PATH" \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_APP_SPECIFIC_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --wait

    - name: Staple notarization ticket
      run: |
        xcrun stapler staple "$DMG_PATH"

    - name: Verify signing and notarization
      run: |
        codesign -dv --verbose=4 "$DMG_PATH"
        spctl -a -vv -t install "$DMG_PATH"

    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.DMG_PATH }}
        tag_name: v${{ env.APP_VERSION }}
        name: Release v${{ env.APP_VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Clean up
      if: always()
      run: |
        security delete-keychain build.keychain || true
        rm -f certificate.p12 || true
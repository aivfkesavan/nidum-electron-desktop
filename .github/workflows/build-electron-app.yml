name: Build and Release Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Get current version
        id: get_version
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV

      - name: Verify and prepare build artifacts
        id: verify_artifacts
        run: |
          echo "Listing dist directory contents..."
          ls -la dist  # Check the dist directory to verify artifacts
          if [ ! -f dist/RAGDrive-1.0.0-arm64.dmg ]; then
            echo "Build artifact 'dist/RAGDrive-1.0.0-arm64.dmg' not found!"
            exit 1
          fi
          if [ ! -f dist/RAGDrive-1.0.0-arm64-mac.zip ]; then
            echo "Build artifact 'dist/RAGDrive-1.0.0-arm64-mac.zip' not found!"
            exit 1
          fi
          echo "DMG_PATH=$(pwd)/dist/RAGDrive-1.0.0-arm64.dmg" >> $GITHUB_ENV
          echo "ZIP_PATH=$(pwd)/dist/RAGDrive-1.0.0-arm64-mac.zip" >> $GITHUB_ENV

      - name: Check Release
        id: check_release
        run: |
          RELEASE_ID=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.id')
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Release
        if: steps.check_release.outputs.RELEASE_ID != 'null'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.RELEASE_ID }}/assets{?name,label}
          asset_path: ${{ env.DMG_PATH }}  # Use absolute path for the DMG file
          asset_name: RAGDrive-1.0.0-arm64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Create Release
        if: steps.check_release.outputs.RELEASE_ID == 'null'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.DMG_PATH }}  # Use absolute path for the DMG file
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

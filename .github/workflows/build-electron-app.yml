name: "Nidum.ai Windows Build and Release"

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Install GTK for Canvas
        shell: bash
        run: |
          curl -L https://github.com/tschaub/gtk-binaries/releases/download/2021-01-04/gtk+-bundle_3.6.4-2021-01-04_win64.zip -o gtk.zip
          unzip gtk.zip -d C:/GTK
          echo "GTK installed at C:/GTK"
        env:
          PATH: C:/GTK/bin:$PATH

      - name: Install dependencies
        shell: bash
        run: |
          if [ -d "node_modules" ]; then
            echo "Cleaning existing node_modules..."
            rm -rf node_modules
          fi
          if [ -f "package-lock.json" ]; then
            echo "Removing existing package-lock.json..."
            rm package-lock.json
          fi
          echo "Installing dependencies..."
          npm install

      - name: Install Windows SDK
        shell: powershell
        run: |
          choco install winsdk -y
          Write-Host "Windows SDK installed successfully."

      - name: Create Self-Signed Certificate
        shell: powershell
        run: |
          openssl req -newkey rsa:2048 -nodes -keyout selfsign.key -x509 -days 365 -out selfsign.crt `
            -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=example.com"
          openssl pkcs12 -export -out selfsign.pfx -inkey selfsign.key -in selfsign.crt -passout pass:1234
          Write-Host "Created self-signed certificate."

      - name: Build Electron App for Windows
        env:
          SIGN_KEY_PATH: selfsign.pfx
          SIGN_KEY_PASSWORD: 1234
        shell: powershell
        run: |
          npm run build-win || exit 1

          $APP_PATH = Get-ChildItem -Path "./dist" -Filter "*.exe" -Recurse | Select-Object -First 1
          if (-not $APP_PATH) {
            Write-Error "Error: EXE file not found."
            exit 1
          }
          echo "APP_PATH=$($APP_PATH.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Sign the application
          & signtool sign /f $env:SIGN_KEY_PATH /p $env:SIGN_KEY_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 $APP_PATH.FullName || exit 1

      - name: Build NSI Installer
        shell: powershell
        run: |
          $MAKENSIS = (Get-Command makensis -ErrorAction SilentlyContinue)
          if (-not $MAKENSIS) {
            Write-Error "Error: NSIS is not installed."
            exit 1
          }

          $MAKENSIS_SCRIPT = "installer_script.nsi"
          if (!(Test-Path $MAKENSIS_SCRIPT)) {
            Write-Error "Error: NSIS script not found."
            exit 1
          }

          & $MAKENSIS $MAKENSIS_SCRIPT || exit 1

          $NSI_PATH = Get-ChildItem -Path "./dist" -Filter "*.nsi" -Recurse | Select-Object -First 1
          if (-not $NSI_PATH) {
            Write-Error "Error: NSI installer not found."
            exit 1
          }
          echo "NSI_PATH=$($NSI_PATH.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
          APP_PATH: ${{ env.APP_PATH }}
          NSI_PATH: ${{ env.NSI_PATH }}
        shell: powershell
        run: |
          if (gh release view "v$($env:VERSION)" 2>$null) {
            Write-Host "Updating existing release for version v$($env:VERSION)"
            gh release upload "v$($env:VERSION)" "$($env:APP_PATH)" "$($env:NSI_PATH)" --clobber || exit 1
          } else {
            Write-Host "Creating new release for version v$($env:VERSION)"
            gh release create "v$($env:VERSION)" "$($env:APP_PATH)" "$($env:NSI_PATH)" `
              --title "Release v$($env:VERSION)" `
              --generate-notes || exit 1
          }

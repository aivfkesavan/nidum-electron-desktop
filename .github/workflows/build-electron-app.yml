name: "Nidum.ai Windows Build and Release"

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Check for package-lock.json
        run: |
          if [ ! -f package-lock.json ]; then
            echo "package-lock.json not found. Running npm install to generate it."
            npm install
          fi

      - name: Install dependencies
        run: npm ci

      - name: Create Self-Signed Certificate
        run: |
          openssl req -newkey rsa:2048 -nodes -keyout selfsign.key -x509 -days 365 -out selfsign.crt \
            -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=example.com"
          openssl pkcs12 -export -out selfsign.pfx -inkey selfsign.key -in selfsign.crt -passout pass:1234
          echo "Created self-signed certificate."

      - name: Build Electron App for Windows
        env:
          SIGN_KEY_PATH: selfsign.pfx
          SIGN_KEY_PASSWORD: 1234
        run: |
          npm run build:win

          APP_PATH=$(find "dist" -name "*.exe" -type f | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: EXE file not found."
            exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV

          # Sign the application
          signtool sign /f "$SIGN_KEY_PATH" /p "$SIGN_KEY_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "$APP_PATH"

          if [ $? -ne 0 ]; then
            echo "Error: Signing failed."
            exit 1
          fi

      - name: Build NSI Installer
        run: |
          MAKENSIS=$(which makensis)
          if [ -z "$MAKENSIS" ]; then
            echo "Error: NSIS is not installed."
            exit 1
          fi

          MAKENSIS_SCRIPT="installer_script.nsi"
          if [ ! -f "$MAKENSIS_SCRIPT" ]; then
            echo "Error: NSIS script not found."
            exit 1
          fi

          $MAKENSIS "$MAKENSIS_SCRIPT"

          NSI_PATH=$(find "dist" -name "*.nsi" -type f | head -n 1)
          if [ -z "$NSI_PATH" ]; then
            echo "Error: NSI installer not found."
            exit 1
          fi
          echo "NSI_PATH=$NSI_PATH" >> $GITHUB_ENV

      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
          APP_PATH: ${{ env.APP_PATH }}
          NSI_PATH: ${{ env.NSI_PATH }}
        run: |
          set -e
          if gh release view "v${VERSION}" > /dev/null 2>&1; then
            echo "Updating existing release for version v${VERSION}"
            gh release upload "v${VERSION}" "${APP_PATH}" "${NSI_PATH}" --clobber
          else
            echo "Creating new release for version v${VERSION}"
            gh release create "v${VERSION}" "${APP_PATH}" "${NSI_PATH}" \
              --title "Release v${VERSION}" \
              --generate-notes

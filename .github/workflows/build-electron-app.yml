name: "Nidum.ai macOS and Windows Build and Release"

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Install dependencies
        run: npm ci

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Build Electron App for macOS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          npm run build

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Install dependencies
        run: npm ci

      - name: Create Self-Signed Certificate
        run: |
          openssl req -newkey rsa:2048 -nodes -keyout selfsign.key -x509 -days 365 -out selfsign.crt \
            -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=example.com"
          openssl pkcs12 -export -out selfsign.pfx -inkey selfsign.key -in selfsign.crt -passout pass:1234
          echo "Created self-signed certificate."

      - name: Build Electron App for Windows
        env:
          SIGN_KEY_PATH: selfsign.pfx
          SIGN_KEY_PASSWORD: 1234
        run: |
          npm run build:win
          APP_PATH=$(find "dist" -name "*.exe" -type f | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: EXE file not found."
            exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          signtool sign /f "$SIGN_KEY_PATH" /p "$SIGN_KEY_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "$APP_PATH"

      - name: Build NSI Installer
        run: |
          MAKENSIS=$(which makensis)
          if [ -z "$MAKENSIS" ]; then
            echo "Error: NSIS is not installed."
            exit 1
          fi
          MAKENSIS_SCRIPT="installer_script.nsi"
          if [ ! -f "$MAKENSIS_SCRIPT" ]; then
            echo "Error: NSIS script not found."
            exit 1
          fi
          $MAKENSIS "$MAKENSIS_SCRIPT"
          NSI_PATH=$(find "dist" -name "*.nsi" -type f | head -n 1)
          if [ -z "$NSI_PATH" ]; then
            echo "Error: NSI installer not found."
            exit 1
          fi
          echo "NSI_PATH=$NSI_PATH" >> $GITHUB_ENV

name: "Nidum.ai macOS Build and Release"
on:
  push:
    branches:
      - main
jobs:
  create-release:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Install dependencies
        run: npm ci

      - name: Configure Vite for Optimized Build
        run: |
          cat <<EOF > vite.config.js
          import { defineConfig } from 'vite';
          export default defineConfig({
            build: {
              chunkSizeWarningLimit: 2000,
              rollupOptions: {
                output: {
                  manualChunks(id) {
                    if (id.includes('node_modules')) {
                      return 'vendor';
                    }
                  },
                },
              },
            },
          });
          EOF

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Build Electron App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Decode and import the Apple certificate
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Modify electron-builder configuration to include pkg
          cat <<EOF > electron-builder.yml
          appId: com.nidum.desktoplocalai
          mac:
            target:
              - dmg
              - pkg
            hardenedRuntime: true
            entitlements: entitlements.mac.plist
            entitlementsInherit: entitlements.mac.inherit.plist
            provisioningProfile: Mac_App_Store_Connect.provisionprofile
          EOF

          # Build the Electron app
          npm run build

          # Locate the built DMG and PKG files
          DMG_PATH=$(find "$PWD/dist" -name "*.dmg" -type f | head -n 1)
          PKG_PATH=$(find "$PWD/dist" -name "*.pkg" -type f | head -n 1)
          if [ -z "$DMG_PATH" ] || [ -z "$PKG_PATH" ]; then
            echo "Error: DMG or PKG file not found."
            exit 1
          fi
          echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV

          # Notarize the DMG
          xcrun notarytool submit "$DMG_PATH" --wait --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format json > dmg_notarization_log.json
          if [ $? -ne 0 ]; then
            echo "Error: DMG notarization failed. See log below:"
            cat dmg_notarization_log.json
            exit 1
          fi

          # Notarize the PKG
          xcrun notarytool submit "$PKG_PATH" --wait --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format json > pkg_notarization_log.json
          if [ $? -ne 0 ]; then
            echo "Error: PKG notarization failed. See log below:"
            cat pkg_notarization_log.json
            exit 1
          fi

          # Staple the notarization tickets
          xcrun stapler staple "$DMG_PATH"
          if [ $? -ne 0 ]; then
            echo "Error: Stapling DMG notarization ticket failed."
            exit 1
          fi
          xcrun stapler staple "$PKG_PATH"
          if [ $? -ne 0 ]; then
            echo "Error: Stapling PKG notarization ticket failed."
            exit 1
          fi

      - name: Check if Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "v${{ env.VERSION }}" > /dev/null 2>&1; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Locate Additional Files
        id: locate_files
        run: |
          # Locate the ZIP and YAML files
          ZIP_PATH=$(find "$PWD/dist" -name "*.zip" -type f | head -n 1)
          YAML_PATH=$(find "$PWD/dist" -name "*.yml" -type f | head -n 1)
          if [ -z "$ZIP_PATH" ] || [ -z "$YAML_PATH" ]; then
            echo "Error: ZIP or YAML file not found."
            exit 1
          fi
          echo "ZIP_PATH=$ZIP_PATH" >> $GITHUB_ENV
          echo "YAML_PATH=$YAML_PATH" >> $GITHUB_ENV

      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ env.RELEASE_EXISTS }}" = "true" ]; then
            echo "Updating existing release for version v${{ env.VERSION }}"
            gh release upload "v${{ env.VERSION }}" "${{ env.DMG_PATH }}" "${{ env.PKG_PATH }}" "${{ env.ZIP_PATH }}" "${{ env.YAML_PATH }}" --clobber
          else
            echo "Creating new release for version v${{ env.VERSION }}"
            gh release create "v${{ env.VERSION }}" "${{ env.DMG_PATH }}" "${{ env.PKG_PATH }}" "${{ env.ZIP_PATH }}" "${{ env.YAML_PATH }}" \
              --title "Release v${{ env.VERSION }}" \
              --generate-notes
          fi

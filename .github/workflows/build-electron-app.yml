name: Build, Sign, and Release Electron App
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: write

jobs:
  build-sign-and-release:
    runs-on: macos-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Install dependencies
        run: npm install

      - name: Import Apple Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "Decoding and importing Apple Certificate..."
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P $APPLE_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          echo "Certificate imported successfully."

      - name: Build the application
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Starting build process..."
          npm run build
          echo "Build completed."

      - name: Get current version
        id: get_version
        run: |
          echo "Extracting version from package.json..."
          VERSION=$(node -p -e "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"

      - name: Verify and prepare build artifacts
        id: verify_artifacts
        run: |
          echo "Listing dist directory contents..."
          ls -la dist
          DMG_FILE="RAGDrive-${{ env.VERSION }}-arm64.dmg"
          if [ ! -f "dist/$DMG_FILE" ]; then
            echo "Error: Build artifact 'dist/$DMG_FILE' not found!"
            exit 1
          fi
          echo "DMG_PATH=$(pwd)/dist/$DMG_FILE" >> $GITHUB_ENV
          echo "Build artifact verified: $DMG_FILE"

      - name: Notarize
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "Starting notarization process for ${{ env.DMG_PATH }}..."
          echo "Apple ID: $APPLE_ID"
          echo "Team ID: $APPLE_TEAM_ID"
          echo "App-Specific Password: [MASKED]"
          
          xcrun notarytool submit "${{ env.DMG_PATH }}" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          if [ $? -ne 0 ]; then
            echo "Error: Notarization failed. Please check your credentials and try again."
            exit 1
          fi
          echo "Notarization completed successfully."

      - name: Staple notarization ticket
        run: |
          echo "Stapling notarization ticket to ${{ env.DMG_PATH }}..."
          xcrun stapler staple "${{ env.DMG_PATH }}"
          if [ $? -ne 0 ]; then
            echo "Error: Stapling failed. This might indicate an issue with the notarization process."
            exit 1
          fi
          echo "Stapling completed successfully."

      - name: Check if Release Exists
        id: check_release
        run: |
          echo "Checking for existing release..."
          TAG_NAME="v${{ env.VERSION }}"
          echo "Checking for tag: $TAG_NAME"
          RELEASE_ID=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" \
            | jq -r '.id')
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "Release check completed. Release ID: $RELEASE_ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Release
        if: steps.check_release.outputs.RELEASE_ID != 'null'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.RELEASE_ID }}/assets{?name,label}
          asset_path: ${{ env.DMG_PATH }}
          asset_name: RAGDrive-${{ env.VERSION }}-arm64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Create Release
        if: steps.check_release.outputs.RELEASE_ID == 'null'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.DMG_PATH }}
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        if: always()
        run: |
          echo "Cleaning up..."
          security delete-keychain build.keychain || true
          rm -f certificate.p12 || true
          echo "Cleanup completed."

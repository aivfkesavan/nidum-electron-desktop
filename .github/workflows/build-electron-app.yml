name: "Nidum.ai macOS Build and Release"

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version.replace(/^v/, '')")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build Electron App
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Set up Apple certificate and keychain
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Build the Electron app
          pnpm run build

          # Locate the built DMG file
          DMG_PATH=$(find "$PWD/dist" -name "*.dmg" -type f | head -n 1)
          echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV
          if [ ! -f "$DMG_PATH" ]; then
            echo "Error: DMG file not found at $DMG_PATH"
            exit 1
          fi

          # Notarize the DMG
          xcrun notarytool submit "$DMG_PATH" --wait --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID"

          # Staple the notarization ticket
          xcrun stapler staple "$DMG_PATH"

      - name: Check Release
        if: startsWith(github.ref, 'refs/tags/')
        id: check_release
        run: |
          RELEASE_ID=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.id')
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Release
        if: startsWith(github.ref, 'refs/tags/') && steps.check_release.outputs.RELEASE_ID != 'null'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.RELEASE_ID }}/assets{?name,label}
          asset_path: ${{ env.DMG_PATH }}
          asset_name: Nidum.ai_${{ steps.get_version.outputs.VERSION }}_aarch64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') && steps.check_release.outputs.RELEASE_ID == 'null'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.DMG_PATH }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
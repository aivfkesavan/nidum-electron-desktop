name: "Nidum.ai macOS Build and Release"

on:
  push:
    branches:
      - v0
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Install dependencies
        run: npm ci

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version.replace(/^v/, '')")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build Electron App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Decode and import the Apple certificate
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Build the Electron app
          npm run build

          # Locate the built DMG file
          DMG_PATH=$(find "$PWD/dist" -name "*.dmg" -type f | head -n 1)
          if [ -z "$DMG_PATH" ]; then
            echo "Error: DMG file not found."
            exit 1
          fi
          echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV

          # Notarize the DMG
          xcrun notarytool submit "$DMG_PATH" --wait --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID"

          # Staple the notarization ticket
          xcrun stapler staple "$DMG_PATH"

      - name: Create Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} "${{ env.DMG_PATH }}" \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes

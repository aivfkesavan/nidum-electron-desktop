name: Build and Release Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Print working directory
        run: pwd  # This will print the current working directory to the logs

      - name: List all files
        run: ls -Rla  # This will list all files recursively to check where 'dist' is and what it contains

      - name: Verify build artifacts
        run: |
          if [ ! -f dist/RAGDrive-1.0.0-arm64.dmg ]; then
            echo "Build artifact 'dist/RAGDrive-1.0.0-arm64.dmg' not found!"
            exit 1
          fi
          if [ ! -f dist/RAGDrive-1.0.0-arm64-mac.zip ]; then
            echo "Build artifact 'dist/RAGDrive-1.0.0-arm64-mac.zip' not found!"
            exit 1
          fi

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: electron-build
          path: dist/**

  release:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Get current version
        id: get_version
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: "Release ${{ env.VERSION }}"
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/RAGDrive-1.0.0-arm64.dmg
          asset_name: RAGDrive-1.0.0-arm64.dmg
          asset_content_type: application/octet-stream

      - name: Upload ZIP Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/RAGDrive-1.0.0-arm64-mac.zip
          asset_name: RAGDrive-1.0.0-arm64-mac.zip
          asset_content_type: application/zip
